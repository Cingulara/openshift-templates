---
kind: DeploymentConfig
apiVersion: v1
metadata:
  name: keycloak
spec:
  strategy:
    type: Rolling
    resources: {}
  replicas: 1
  selector:
    name: keycloak
  template:
    metadata:
      labels:
        name: keycloak
    spec:
      containers:
      - name: out-keycloak-container
        image:  jboss/keycloak-openshift:3.4.3.Final
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 7600
          protocol: TCP
        - containerPort: 57600
          protocol: TCP
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_USER
          value: admin
        - name: KEYCLOAK_PASSWORD
          value: p@ssword
        - name: POSTGRES_DATABASE
          value: keycloak
        - name: POSTGRES_USER
          value: admin
        - name: POSTGRES_PASSWORD
          value: p@ssword
        - name: POSTGRES_PORT_5432_TCP_ADDR
          value: postgresql
        - name: POSTGRES_PORT_5432_TCP_PORT
          value: "5432"
        - name: OPERATING_MODE
          value: clustered
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        securityContext:
          privileged: false
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: keycloak
  labels:
    name: keycloak
spec:
  ports:
  - protocol: TCP
    port: 8080
    name: tcp-8080
    targetPort: 8080
  - protocol: TCP
    port: 8443
    name: tcp-8443
    targetPort: 8443
  selector:
    name: keycloak
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: v1
metadata:
  name: keycloak
spec:
  host: ""
  to:
    kind: Service
    name: keycloak
  port:
    targetPort: tcp-8080
---
apiVersion: v1
kind: Secret
metadata:
  name: "postgresql"
stringData:
  database-name: "keycloak"
  database-password: "admin"
  database-user: "admin"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: "postgresql"
spec:
  ports:
  - name: postgresql
    nodePort: 0
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    name: "postgresql"
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "postgresql"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: 'true'
  name: "postgresql"
spec:
  replicas: 1
  selector:
    name: "postgresql"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: "postgresql"
    spec:
      containers:
      - capabilities: {}
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: "postgresql"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: "postgresql"
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: "postgresql"
        image: " "
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - "/usr/libexec/check-container"
            - "--live"
          initialDelaySeconds: 120
          timeoutSeconds: 10
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - "/usr/libexec/check-container"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: "512Mi"
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: "/dev/termination-log"
        volumeMounts:
        - mountPath: "/var/lib/pgsql/data"
          name: "postgresql-data"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: "postgresql-data"
        persistentVolumeClaim:
          claimName: "postgresql"
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:latest
        namespace: "openshift"
      lastTriggeredImage: ''
    type: ImageChange
  - type: ConfigChange